#include <SoftwareSerial.h>
#include "enes100.h"
#define SensorPin 0


SoftwareSerial mySerial(5, 6); //RX is pin 8, TX is pin 9
enes100::RfClient<SoftwareSerial> rf(&mySerial); 
enes100::Marker marker;
int markerNumber=106;

//pins
const int mot1 = 10;
const int mot2 = 10;
const int mot3 = 11;
const int mot4 = 11;
const int leftDir = 12;
const int rightDir = 13;
const int trig1 = 10;
const int echo1 = 11;
const int trig2 = 0;
const int echo2 = 0;
const int winch = 14;

//constants and variables
const float finalX = 2.2;
const float finalY = 1.4;
const float coordMargin = .04;
const float thetaMargin = .3;
const int straightPWM = 50;
const int turnPWM = 100;
const int adjustPWM = 20;
const long obstaclePing = .1;
const long approachDist = 2.0;
int badPingCount;
float thetaDesired;
long detourX1 = 0;
long detourX2 = 0;
long detourX3 = 0;
long detourY1 = 0;
long detourY2 = 0;
long detourY3 = 0;
unsigned long int avgValue;
float b;
int buf[10],temp;
int mode;

void setup() 
{
  mySerial.begin(9600);
  Serial.begin(9600);

  pinMode(0,INPUT);
  pinMode(5, INPUT); //RX for RF
  pinMode(6, OUTPUT); //TX for RF
  rf.resetServer();
  rf.sendMessage("\nTeam Drop the Base is Connected\n"); //sent to mission control
  Serial.println("Team Drop the Base is Connected"); //sent to student's serial 
  pinMode(mot1, OUTPUT);
  pinMode(mot2, OUTPUT);
  pinMode(mot3, OUTPUT);
  pinMode(mot4, OUTPUT);
  pinMode(leftDir, OUTPUT);
  pinMode(rightDir, OUTPUT);
  pinMode(trig1, OUTPUT);
  pinMode(echo1, INPUT);
  pinMode(trig2, OUTPUT);
  pinMode(echo2, INPUT);
  pinMode(winch, OUTPUT);
  mode = 1;
  thetaDesired = 0;
  badPingCount = 0;
  
  calcInitialRoute();
}

void loop()
{
  int hold = mode;
  switch(hold)
  {
    case 1:
      goToInitialPoint();
      break;
    case 2:
      turnTowardsPool();
      break;
    case 3:
      moveToPool();
      break;
    case 4:
      stopLocomotion();
      break;
    case 5:
      avoidObstacle1();
      break;
    case 6:
      avoidObstacle2();
      break;
    case 7:
      avoidObstacle3();
      break;
    case 8:
      avoidObstacle4();
      break;
    case 99:
      stopLocomotion();
      break;
     
      
  }
}

void calcInitialRoute()
{
  if(rf.receiveMarker(&marker, markerNumber))
  {
    if(marker.x < 1.8)
    {
      thetaDesired = 0;
    }
    else
    {
      thetaDesired = 3.14;
    }
  }
}

void goToInitialPoint()
{
  if(rf.receiveMarker(&marker, markerNumber))
  {
    if(marker.theta + thetaMargin < 0)
    {
        rf.sendMessage(marker.theta);
      turnLeft();
    }
    else if(marker.theta - thetaMargin > 0)
    {
        rf.sendMessage(marker.theta);
      turnRight();
    }
     else if(marker.y + coordMargin < finalY && thetaDesired == 0)
      {
        rf.sendMessage(marker.y);
        moveForward();
      }
 
     else if(marker.y - coordMargin > finalY && thetaDesired == 3.14)
      {
        rf.sendMessage(marker.y);
        moveBackward();
      }
    else
    {
      thetaDesired = -1.57;
      mode = 2;
    }
  }
}

void turnTowardsPool()
{
  if(rf.receiveMarker(&marker, markerNumber))
  {
    rf.sendMessage("Turning towards pool\n");
    if(marker.theta - thetaMargin > thetaDesired)
    {
      turnRight();
    }
    else if(marker.theta + thetaMargin < thetaDesired)
    {
      turnLeft();
    }
    else
    {
      mode = 3;
    }
  }
}

void moveToPool()
{
    rf.sendMessage("\nMoving towards pool");
  if(rf.receiveMarker(&marker, markerNumber))
  {
    //if(ping1() > obstaclePing && ping2() > obstaclePing)
    if(true)
    {
      badPingCount = 0;
      if(marker.x + coordMargin < approachDist)
      {
        rf.sendMessage(marker.x);
        if(marker.y + coordMargin < finalY)
        {
          moveForwardAdjustLeft();
        }
        else if(marker.y - coordMargin > finalY)
        {
          moveForwardAdjustRight();
        }
        else
        {
          moveForward();
        }
      }
      else
      {
        mode = 4;
      }
      
    }
    else if(ping1() < obstaclePing || ping2() < obstaclePing)
    {
      //Pings consistantly detecting an obstacle
      if(badPingCount >= 5)
      {
        rf.sendMessage("\nSetting Detour\n");
        setDetour(marker.x, marker.y);
        mode = 5;
      }
      else
      {
        badPingCount = badPingCount + 1;
      }
    }
  }
}

void setDetour(long x, long y)
{
  detourX1 = x;
  detourY1 = y - .4;
  detourX2 = x + .4;
  detourY2 = y - .4;
  detourX3 = x + .4;
  detourY3 = y;
  setTurnRight();
  mode = 6;
}

void setTurnLeft()
{
  if(thetaDesired == 3.14)
  {
    thetaDesired = -1.27;
  }
  else
  {
    thetaDesired = thetaDesired + 1.27;
  }
}

void setTurnRight()
{
  if(thetaDesired == -3.14)
  {
    thetaDesired = 1.27;
  }
  else
  {
    thetaDesired = thetaDesired - 1.27;
  }
}

void avoidObstacle1()
{
  if(rf.receiveMarker(&marker, markerNumber))
  {
    rf.sendMessage("\nDetour 1");
    if(marker.theta - thetaMargin > thetaDesired)
    {
      turnRight();
    }
    else if(marker.y - coordMargin > detourY1)
    {
      moveForward();
    }
    else
    {
      setTurnLeft();
      mode = 6;
    }
  }
}

void avoidObstacle2()
{
    if(rf.receiveMarker(&marker, markerNumber))
  {
    rf.sendMessage("\nDetour 2");
    if(marker.theta + thetaMargin < thetaDesired)
    {
      turnLeft();
    }
    else if(marker.x - coordMargin < detourX2)
    {
      moveForward();
    }
    else
    {
      setTurnLeft();
      mode = 7;
    }
  }
}

void avoidObstacle3()
{
  if(rf.receiveMarker(&marker, markerNumber))
  {
    rf.sendMessage("\nDetour 3");
    if(marker.theta + thetaMargin < thetaDesired)
    {
      turnLeft();
    }
    else if(marker.y + coordMargin > detourY3)
    {
      moveForward();
    }
    else
    {
      setTurnRight();
      mode = 8;
    }
  }
}

void avoidObstacle4()
{
  if(rf.receiveMarker(&marker, markerNumber))
  {
    rf.sendMessage("\nDetour 3");
    if(marker.theta - thetaMargin > thetaDesired)
    {
      turnRight();
    }
    else
    {
      mode = 9;
    }
  }
}

void startPHMeasure()
{
  lowerPHProbe();
  delay(10000);
  float ph = getPH();
  rf.sendMessage("We are reading a pH of : ");
  rf.sendMessage(ph);
  mode = 99;
}

void lowerPHProbe()
{
  
}

void turnLeft()
{
  digitalWrite(leftDir, LOW);
  digitalWrite(rightDir, HIGH);
  analogWrite(mot1, turnPWM);
  analogWrite(mot2, turnPWM);
  analogWrite(mot3, turnPWM);
  analogWrite(mot4, turnPWM);
}

void turnRight()
{
  digitalWrite(leftDir, HIGH);
  digitalWrite(rightDir, LOW);
  analogWrite(mot1, turnPWM);
  analogWrite(mot2, turnPWM);
  analogWrite(mot3, turnPWM);
  analogWrite(mot4, turnPWM);
}

void moveForward()
{
  digitalWrite(leftDir, HIGH);
  digitalWrite(rightDir, HIGH);
  analogWrite(mot1, straightPWM);
  analogWrite(mot2, straightPWM);
  analogWrite(mot3, straightPWM);
  analogWrite(mot4, straightPWM);
}

void moveForwardAdjustLeft()
{
  digitalWrite(leftDir, HIGH);
  digitalWrite(rightDir, HIGH);
  analogWrite(mot1, straightPWM);
  analogWrite(mot2, straightPWM);
  analogWrite(mot3, straightPWM + adjustPWM);
  analogWrite(mot4, straightPWM + adjustPWM);
}

void moveForwardAdjustRight()
{
  digitalWrite(leftDir, HIGH);
  digitalWrite(rightDir, HIGH);
  analogWrite(mot1, straightPWM + adjustPWM);
  analogWrite(mot2, straightPWM + adjustPWM);
  analogWrite(mot3, straightPWM);
  analogWrite(mot4, straightPWM);
}

void moveBackward()
{
  digitalWrite(leftDir, LOW);
  digitalWrite(rightDir, LOW);
  analogWrite(mot1, straightPWM);
  analogWrite(mot2, straightPWM);
  analogWrite(mot3, straightPWM);
  analogWrite(mot4, straightPWM);
}

void stopLocomotion()
{
  analogWrite(mot1, 0);
  analogWrite(mot2, 0);
  analogWrite(mot3, 0);
  analogWrite(mot4, 0);
}

long ping1()
{
  pinMode(trig1, OUTPUT);
  digitalWrite(trig1, LOW);
  delayMicroseconds(2);
  digitalWrite(trig1, HIGH);
  delayMicroseconds(5);
  digitalWrite(trig1, LOW);
  pinMode(echo1,INPUT);
  long duration = pulseIn(echo2, HIGH);
  return (microsecondsToCentimeters(duration)/100);
}

long ping2()
{
  pinMode(trig2, OUTPUT);
  digitalWrite(trig2, LOW);
  delayMicroseconds(2);
  digitalWrite(trig2, HIGH);
  delayMicroseconds(5);
  digitalWrite(trig2, LOW);
  pinMode(echo2,INPUT);
  long duration = pulseIn(echo2, HIGH);
  return (microsecondsToCentimeters(duration)/100);
}

float getPH()
{
  for(int i=0; i<10; i++){
    buf[i] = analogRead(SensorPin);
    delay(10);
  }
  for(int i= 0; i<9; i++){
    for(int j=i+1;j<10;j++){
      if(buf[i]>buf[j]){
        temp=buf[i];
        buf[i]=buf[j];
        buf[j]=temp;
      }
    }
  }
  avgValue = 0;
  for(int i=2; i<8; i++)
    avgValue+=buf[i];
  float phValue = (float)avgValue*5.0/1024/6;
  phValue = 3.5*phValue;
  Serial.print("    ph:");
  Serial.print(phValue,2);
  Serial.print(" ");
  return phValue;
  delay(500);
}

long microsecondsToCentimeters(long microseconds)
{
// The speed of sound is 340 m/s or 29 microseconds per centimeter.
// The ping travels out and back, so to find the distance of the
// object we take half of the distance travelled.
return microseconds / 29 / 2;
}
